name: hub

x-common-settings: &common-settings
  restart: always

services:
  apigw:
    <<: *common-settings
    build:
      context: nginx
      dockerfile: dockerfile
    container_name: apigw
    ports:
      - 80:80
    depends_on:
      - microphoto
      - microuser
      #- microtagger
    networks:
      - frontend

  microuser:
    <<: *common-settings
    build:
      context: microUser
      dockerfile: dockerfile
    depends_on:
      - userdb
    deploy:
      replicas: 1
    networks:
      - frontend
      - backend
    environment:
      - token_secret=metro
      - mongo_connection=mongodb://userdb:27017/
      - mongo_user=DS
      - mongo_pwd=2023

  microphoto:
    <<: *common-settings
    build:
      context: microPhoto
      dockerfile: dockerfile
    depends_on:
      - photodb
      - kafka
      - init-kafka
    deploy:
      replicas: 1
    networks:
      - frontend
      - backend
    environment:
      - token_secret=metro
      - mongo_connection=mongodb://photodb:27017/
      - mongo_user=DS
      - mongo_pwd=2023
      - kafka_endpoint=hub-kafka-1:9092
      - minio_endpoint=hub-minio-1:9000
      - minio_user=username
      - minio_pwd=password

  microtagger:
    <<: *common-settings
    build:
      context: microTagger
      dockerfile: dockerfile
    depends_on:
      - kafka
      - init-kafka
    deploy:
      replicas: 1
    networks:
      - backend
    environment:
      - kafka_endpoint=hub-kafka-1:9092

  zookeeper:
    <<: *common-settings
    image: confluentinc/cp-zookeeper:latest
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    <<: *common-settings
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      - backend
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hub-kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    networks:
      - backend
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server hub-kafka-1:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server hub-kafka-1:9092 --create --if-not-exists --topic foto --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server hub-kafka-1:9092 --create --if-not-exists --topic tag --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server hub-kafka-1:9092 --list
      "

  minio:
    <<: *common-settings
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    hostname: miniomicro
    environment:
      MINIO_ROOT_USER: username
      MINIO_ROOT_PASSWORD: password
      MINIO_ROOT_URL:
    networks:
      - backend
    volumes:
      - minio_data:/data
    command: server /data --console-address 0.0.0.0:9001

  userdb:
    <<: *common-settings
    build:
      context: UserDatabaseDocker
      dockerfile: dockerfile
    container_name: userdb
    ports:
      - 9999:27017
    networks:
      - backend
    volumes:
      - user_data:/data/db

  photodb:
    <<: *common-settings
    build:
      context: PhotoDatabaseDocker
      dockerfile: dockerfile
    container_name: photodb
    ports:
      - 9998:27017
    networks:
      - backend
    volumes:
      - photo_data:/data/db

volumes:
  photo_data:
  user_data:
  minio_data:

networks:
  backend:
  frontend:

